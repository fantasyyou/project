// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package simple

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SimpleClient is the client API for Simple service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleClient interface {
	Query(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error)
	VagueQuery(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error)
	SortQuery(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error)
	Get(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error)
	Insert(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error)
	Update(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error)
	UpLoad(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error)
	DownLoad(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error)
	ExcelDownLoad(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error)
}

type simpleClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleClient(cc grpc.ClientConnInterface) SimpleClient {
	return &simpleClient{cc}
}

func (c *simpleClient) Query(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error) {
	out := new(HelloReplay)
	err := c.cc.Invoke(ctx, "/Simple/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleClient) VagueQuery(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error) {
	out := new(HelloReplay)
	err := c.cc.Invoke(ctx, "/Simple/VagueQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleClient) SortQuery(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error) {
	out := new(HelloReplay)
	err := c.cc.Invoke(ctx, "/Simple/SortQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleClient) Get(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error) {
	out := new(HelloReplay)
	err := c.cc.Invoke(ctx, "/Simple/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleClient) Insert(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error) {
	out := new(HelloReplay)
	err := c.cc.Invoke(ctx, "/Simple/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleClient) Update(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error) {
	out := new(HelloReplay)
	err := c.cc.Invoke(ctx, "/Simple/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleClient) UpLoad(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error) {
	out := new(HelloReplay)
	err := c.cc.Invoke(ctx, "/Simple/UpLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleClient) DownLoad(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error) {
	out := new(HelloReplay)
	err := c.cc.Invoke(ctx, "/Simple/DownLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleClient) ExcelDownLoad(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReplay, error) {
	out := new(HelloReplay)
	err := c.cc.Invoke(ctx, "/Simple/ExcelDownLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleServer is the server API for Simple service.
// All implementations must embed UnimplementedSimpleServer
// for forward compatibility
type SimpleServer interface {
	Query(context.Context, *HelloRequest) (*HelloReplay, error)
	VagueQuery(context.Context, *HelloRequest) (*HelloReplay, error)
	SortQuery(context.Context, *HelloRequest) (*HelloReplay, error)
	Get(context.Context, *HelloRequest) (*HelloReplay, error)
	Insert(context.Context, *HelloRequest) (*HelloReplay, error)
	Update(context.Context, *HelloRequest) (*HelloReplay, error)
	UpLoad(context.Context, *HelloRequest) (*HelloReplay, error)
	DownLoad(context.Context, *HelloRequest) (*HelloReplay, error)
	ExcelDownLoad(context.Context, *HelloRequest) (*HelloReplay, error)
}

// UnimplementedSimpleServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleServer struct {
}

func (*UnimplementedSimpleServer) Query(context.Context, *HelloRequest) (*HelloReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedSimpleServer) VagueQuery(context.Context, *HelloRequest) (*HelloReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VagueQuery not implemented")
}
func (*UnimplementedSimpleServer) SortQuery(context.Context, *HelloRequest) (*HelloReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortQuery not implemented")
}
func (*UnimplementedSimpleServer) Get(context.Context, *HelloRequest) (*HelloReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedSimpleServer) Insert(context.Context, *HelloRequest) (*HelloReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedSimpleServer) Update(context.Context, *HelloRequest) (*HelloReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedSimpleServer) UpLoad(context.Context, *HelloRequest) (*HelloReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpLoad not implemented")
}
func (*UnimplementedSimpleServer) DownLoad(context.Context, *HelloRequest) (*HelloReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownLoad not implemented")
}
func (*UnimplementedSimpleServer) ExcelDownLoad(context.Context, *HelloRequest) (*HelloReplay, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExcelDownLoad not implemented")
}
func (*UnimplementedSimpleServer) mustEmbedUnimplementedSimpleServer() {}

func RegisterSimpleServer(s *grpc.Server, srv SimpleServer) {
	s.RegisterService(&_Simple_serviceDesc, srv)
}

func _Simple_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Simple/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).Query(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simple_VagueQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).VagueQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Simple/VagueQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).VagueQuery(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simple_SortQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).SortQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Simple/SortQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).SortQuery(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simple_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Simple/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).Get(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simple_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Simple/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).Insert(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simple_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Simple/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).Update(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simple_UpLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).UpLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Simple/UpLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).UpLoad(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simple_DownLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).DownLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Simple/DownLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).DownLoad(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Simple_ExcelDownLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleServer).ExcelDownLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Simple/ExcelDownLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleServer).ExcelDownLoad(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Simple_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Simple",
	HandlerType: (*SimpleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Simple_Query_Handler,
		},
		{
			MethodName: "VagueQuery",
			Handler:    _Simple_VagueQuery_Handler,
		},
		{
			MethodName: "SortQuery",
			Handler:    _Simple_SortQuery_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Simple_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _Simple_Insert_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Simple_Update_Handler,
		},
		{
			MethodName: "UpLoad",
			Handler:    _Simple_UpLoad_Handler,
		},
		{
			MethodName: "DownLoad",
			Handler:    _Simple_DownLoad_Handler,
		},
		{
			MethodName: "ExcelDownLoad",
			Handler:    _Simple_ExcelDownLoad_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "simple.proto",
}
